import Head from 'next/head'
import { useState, useRef, useEffect } from 'react'
import * as timeago from "timeago.js"
import {
  MainContainer,
  ChatContainer,
  MessageList,
  Message,
  MessageInput,
  ConversationHeader,
  TypingIndicator
} from "@chatscope/chat-ui-kit-react"
import "@chatscope/chat-ui-kit-styles/dist/default/styles.min.css";
import { useChannel } from '@ably-labs/react-hooks'
import { Types } from "ably"
import { v4 as uuidv4 } from 'uuid';
const channelId = uuidv4();

const topics = [
  "Help me feel less anxious",
  "Help me not feel sad",
  "Help me not feel alone",
  "Help me feel motivated",
  "Help me improve my relationship",
  "Help me feel more confident",
  "Help me cope with a loss",
  "Help me navigate a major life decision",
];
type MessageEntry = {
    message: string
    speaker: "bot" | "user"
    date: Date
    id?: string
    liked?: boolean
  }

  const updateChatbotMessage = (
    conversation: MessageEntry[],
    message: Types.Message
  ): MessageEntry[] => {
    const interactionId = message.data.interactionId;
  
    const updatedConversation = conversation.reduce(
      (acc: MessageEntry[], e: MessageEntry) => [
        ...acc,
        e.id === interactionId
          ? { ...e, message: e.message + message.data.token }
          : e,
      ],
      []
    );
  
    return conversation.some((e) => e.id === interactionId)
      ? updatedConversation
      : [
          ...updatedConversation,
          {
            id: interactionId,
            message: message.data.token,
            speaker: "bot",
            date: new Date(),
            liked: false,
          },
        ];
  };

export default function Home() {
  const [ text, setText ] = useState("")
  const [ conversation, setConversation] = useState<MessageEntry[]>([])
  const [ botIsTyping, setBotIsTyping] = useState<boolean>(false)
  const [ statusMessage, setStatusMessage] = useState<string>("Waiting for query...")
  const [ userId, setUserId] = useState<string>("")
  const [ conversationStatus, setConversationSatus] = useState<string>("rootCauseIdentification")
  

  const inputRef = useRef<HTMLInputElement>(null);
  
  useEffect(() => inputRef.current?.focus());

   useChannel(channelId || 'default', (message) => {
    switch(message.data.event) {
      case "response": 
        setConversation((state) => updateChatbotMessage(state, message))
        break
      case "status":
        setStatusMessage(message.data.message)
        break
      case "responseEnd":
      default:
        setBotIsTyping(false)
        setStatusMessage("Waiting for query...")
    }
  })


  const sendUserInput = async (input: string) => {
    let history = conversation.map((data) => data.message).reverse().join("\n");
    console.log("conver",conversationStatus)
    try {
      setBotIsTyping(true);
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ initialStatus: conversationStatus, history, query: input, userId:channelId}), // Include the selected topic in the user input
      });

      const responseData = await response.json();
      const newStatus = responseData.status; // Assuming the API returns the new status
      setConversationSatus(newStatus); // Update the conversation status
    } catch (error) {
      console.error("Error submitting message:", error);
    } finally {
      setBotIsTyping(false);
    }
  };

  const submit = async () => {


    setConversation((state) => [
      ... state, {
        message: text,
        speaker: "user",
        date: new Date()
      }
    ])

    // Send the user input to the API
    sendUserInput(text);

    setText("")
  }

  const handleBookingSubmit = (name: string, email: string) => {
    console.log("Booking with name:", name, "and email:", email);
    // Handle the booking logic here
}

  return (
    <>
      <Head>
        <title>Mental Help</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
      <div style={{ position: "relative", height: "92vh", overflow: "hidden" }}>
      {conversationStatus === 'bookSession' ? (
                    <BookingForm onSubmit={handleBookingSubmit} />
                ) : (
                   
            <MainContainer>
            <ChatContainer>
                <ConversationHeader>
                  <ConversationHeader.Actions></ConversationHeader.Actions>
                  <ConversationHeader.Content
                    userName="ChatBot"
                    info={statusMessage}
                  />
                </ConversationHeader>
                <MessageList
                  typingIndicator={
                    botIsTyping ? (
                      <TypingIndicator content="Bot is typing" />
                    ) : null
                  }
                >
                  { 
                  conversation.map((entry, index) => {
                    return (
                      <Message
                        key={index}
                        style={{ width: "90%" }}
                        model={{
                          type: "custom",
                          sender: entry.speaker,
                          position: "single",
                          direction:
                            entry.speaker === "bot" ? "incoming" : "outgoing"
                        }}
                      >
                        <Message.CustomContent>
                        <span  dangerouslySetInnerHTML={{__html: entry.message}} />
                        </Message.CustomContent>
                        <Message.Footer
                          sentTime={timeago.format(entry.date)}
                          sender={entry.speaker === 'bot' ? "Bot": "You"}
                        />
                      </Message>
                    )
                  })
                  }
                </MessageList>
                <MessageInput
                  ref={inputRef}
                  placeholder='Type message here'
                  onSend={submit}
                  onChange={(e, text) => {
                    setText(text);
                  }}
                  sendButton={true}
                  disabled={botIsTyping}
                  style={{
                    backgroundColor:
                      conversationStatus === "rootCauseIdentification"
                        ? "#ccffcc" // Set the background color for rootCauseIdentification
                        : conversationStatus === "solutionTypeIdentification"
                        ? "#ffcccc" // Set the background color for solutionTypeIdentification
                        : "#cccccc", // Default background color
                  }}
                />

            </ChatContainer>
          </MainContainer>
                )}
        </div>
      </main>
    </>
  )
}



interface BookingFormProps {
  onSubmit: (name: string, email: string) => void;
}

const BookingForm: React.FC<BookingFormProps> = ({ onSubmit }) => {
  const [name, setName] = useState<string>("");
  const [email, setEmail] = useState<string>("");
  const [isEmailValid, setIsEmailValid] = useState<boolean>(false);

  // Validate email using regex pattern
  const validateEmail = (email: string): boolean => {
      let pattern = /^[^ ]+@[^ ]+\.[a-z]{2,6}$/;
      return pattern.test(email);
  }

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      setEmail(e.target.value);
      setIsEmailValid(validateEmail(e.target.value));
  };

  const handleSubmit = () => {
      onSubmit(name, email);
  }

  return (
      <div>
          <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Name"
          />
          <input
              type="email"
              value={email}
              onChange={handleEmailChange}
              placeholder="Email"
          />
          <button 
              onClick={handleSubmit} 
              disabled={!isEmailValid || name === "" || email === ""}
          >
              Submit
          </button>
      </div>
  );
}
